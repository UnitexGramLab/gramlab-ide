/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package leximir;

import helper.GridHelper;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import leximir.delac.menu.MenuAddBeforeDelac;
import model.StaticValue;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import util.Utils;

/**
 *
 * @author rojo
 */
public final class EditorDelac extends javax.swing.JFrame {
    private DefaultTableModel tableModel ;
    /**
     * Creates new form EditorLadl
     */
    public EditorDelac() {
        try {
            initComponents();
            this.setTitle("Editor for Dela Dictionaries of compounds words");
            tableModel = GridHelper.getOpenEditorforDelac();
            JTable table = new JTable(getTableModel());
            jLabel12.setText(jLabel12.getText()+tableModel.getRowCount());
            RowSorter<TableModel> sort = new TableRowSorter<>(table.getModel());
            this.getjTable1().setRowSorter(sort);
            this.getjTable1().setModel(table.getModel());
            this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            this.getjTable1().setDefaultRenderer(Object.class, new DefaultTableCellRenderer()
            {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
                {
                    final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    c.setBackground(row % 2 == 0 ? Color.LIGHT_GRAY : Color.WHITE);
                    c.setForeground(Color.black);
                    return c;
                }
            });
        } catch (IOException ex) {
            Logger.getLogger(EditorDelac.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldPos = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldLemma = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldFst = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldSinSem = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButtonAll = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldDic = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuNew = new javax.swing.JMenu();
        jMenuItemInsertBefore = new javax.swing.JMenuItem();
        jMenuItemInsertAfter = new javax.swing.JMenuItem();
        jMenuBefore = new javax.swing.JMenu();
        jMenuAfter = new javax.swing.JMenu();
        jMenuEdit = new javax.swing.JMenu();
        jMenuView = new javax.swing.JMenu();
        jMenuSort = new javax.swing.JMenu();
        jMenuDelete = new javax.swing.JMenu();
        jMenuInflect = new javax.swing.JMenu();
        jMenuStatistics = new javax.swing.JMenu();
        jMenuWorldNet = new javax.swing.JMenu();
        jMenuSave = new javax.swing.JMenu();
        jMenuConv = new javax.swing.JMenu();
        jMenuCount = new javax.swing.JMenu();
        jMenuSaveLMF = new javax.swing.JMenu();
        jMenuHepl = new javax.swing.JMenu();
        jMenuExit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("POS");

        jTextFieldPos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldPosKeyPressed(evt);
            }
        });

        jLabel1.setText("CLema");

        jTextFieldLemma.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldLemmaKeyPressed(evt);
            }
        });

        jLabel3.setText("FST");

        jTextFieldFst.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldFstKeyPressed(evt);
            }
        });

        jLabel4.setText("SynSem");

        jTextFieldSinSem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldSinSemKeyPressed(evt);
            }
        });

        jButton2.setText("1");

        jButtonAll.setText("All");
        jButtonAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAllActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Extract Match");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel6.setText("NewDicId");

        jTextFieldDic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldDicKeyPressed(evt);
            }
        });

        jButton3.setText("Move");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(44, 44, 44)
                        .addComponent(jLabel1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextFieldPos, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldLemma, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(58, 58, 58)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextFieldFst, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3))
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextFieldSinSem, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAll)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextFieldDic, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addComponent(jLabel6))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldLemma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldFst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldSinSem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButtonAll)
                    .addComponent(jCheckBox1)
                    .addComponent(jTextFieldDic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }

        )
    );
    jScrollPane1.setViewportView(jTable1);

    jLabel8.setText("POS");

    jLabel9.setText("CLema");

    jLabel10.setText("FST Code");

    jLabel11.setText("all columns");

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addGap(23, 23, 23)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1315, Short.MAX_VALUE)
            .addContainerGap())
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addGap(93, 93, 93)
            .addComponent(jLabel11)
            .addGap(458, 458, 458)
            .addComponent(jLabel8)
            .addGap(74, 74, 74)
            .addComponent(jLabel9)
            .addGap(43, 43, 43)
            .addComponent(jLabel10)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel4Layout.setVerticalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 6, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(jLabel9)
                        .addComponent(jLabel10)))
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addComponent(jLabel11)
                    .addGap(0, 0, Short.MAX_VALUE))))
    );

    jLabel7.setText("Search : ");

    jButtonSearch.setText("Search");
    jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonSearchActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonSearch)
            .addContainerGap(42, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel7)
                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButtonSearch))
            .addContainerGap(33, Short.MAX_VALUE))
    );

    jTextField1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jTextField1ActionPerformed(evt);
        }
    });

    jButton4.setText("Search Multicriteria");
    jButton4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton4ActionPerformed(evt);
        }
    });

    jLabel12.setText("Rec.No : ");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel12)
                    .addGap(73, 73, 73)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(26, 26, 26)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jButton4)))
            .addContainerGap(282, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(23, 23, 23)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(45, 45, 45))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4)
                        .addComponent(jLabel12))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
    );

    jMenuNew.setText("New");
    jMenuNew.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jMenuNewMouseClicked(evt);
        }
    });

    jMenuItemInsertBefore.setText("insert before");
    jMenuItemInsertBefore.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItemInsertBeforeActionPerformed(evt);
        }
    });
    jMenuNew.add(jMenuItemInsertBefore);

    jMenuItemInsertAfter.setText("insert after");
    jMenuItemInsertAfter.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuItemInsertAfterActionPerformed(evt);
        }
    });
    jMenuNew.add(jMenuItemInsertAfter);

    jMenuBar1.add(jMenuNew);

    jMenuBefore.setText("Copy Before");
    jMenuBefore.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jMenuBeforeMouseClicked(evt);
        }
    });
    jMenuBar1.add(jMenuBefore);

    jMenuAfter.setText("Copy After");
    jMenuAfter.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jMenuAfterMouseClicked(evt);
        }
    });
    jMenuBar1.add(jMenuAfter);

    jMenuEdit.setText("Edit");
    jMenuEdit.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jMenuEditMouseClicked(evt);
        }
    });
    jMenuBar1.add(jMenuEdit);

    jMenuView.setText("View");
    jMenuView.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jMenuViewMouseClicked(evt);
        }
    });
    jMenuBar1.add(jMenuView);

    jMenuSort.setText("Sort Dict");
    jMenuBar1.add(jMenuSort);

    jMenuDelete.setText("Delete");
    jMenuDelete.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jMenuDeleteMouseClicked(evt);
        }
    });
    jMenuBar1.add(jMenuDelete);

    jMenuInflect.setText("Inflect");
    jMenuInflect.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jMenuInflectMouseClicked(evt);
        }
    });
    jMenuBar1.add(jMenuInflect);

    jMenuStatistics.setText("Statistics");
    jMenuStatistics.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jMenuStatisticsMouseClicked(evt);
        }
    });
    jMenuStatistics.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuStatisticsActionPerformed(evt);
        }
    });
    jMenuBar1.add(jMenuStatistics);

    jMenuWorldNet.setText("WorldNet");
    jMenuBar1.add(jMenuWorldNet);

    jMenuSave.setText("Save");
    jMenuSave.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jMenuSaveMouseClicked(evt);
        }
    });
    jMenuBar1.add(jMenuSave);

    jMenuConv.setText("Conv");
    jMenuBar1.add(jMenuConv);

    jMenuCount.setText("Count WN");
    jMenuBar1.add(jMenuCount);

    jMenuSaveLMF.setText("Save LMF");
    jMenuBar1.add(jMenuSaveLMF);

    jMenuHepl.setText("Help");
    jMenuBar1.add(jMenuHepl);

    jMenuExit.setText("Exit");
    jMenuExit.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jMenuExitMouseClicked(evt);
        }
    });
    jMenuBar1.add(jMenuExit);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        try {
            String text = jTextFieldSearch.getText();
            TableRowSorter<TableModel> rowSorter;
            rowSorter = new TableRowSorter<>(GridHelper.getOpenEditorLadlforDelac().getModel());
            this.getjTable1().setRowSorter(rowSorter);
            this.getjTable1().removeAll();
            if (text.length() == 0) {
                rowSorter.setRowFilter(null);
            } else {
                rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
            }
            this.getjTable1().repaint();            
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jMenuStatisticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuStatisticsActionPerformed

    }//GEN-LAST:event_jMenuStatisticsActionPerformed

    private void jMenuNewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuNewMouseClicked
        
    }//GEN-LAST:event_jMenuNewMouseClicked

    private void jMenuStatisticsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuStatisticsMouseClicked
        try {
            Map<String, HashMap<String, String>> data = new HashMap<>();
            int k = 0;
            for (int i = 0; i < this.getjTable1().getRowCount(); i++) {
                String dic = (String) this.getjTable1().getValueAt(i, 8);
                String value = (String) this.getjTable1().getValueAt(i, 0);
                if (!data.containsKey(dic)) {
                    data.put(dic, new HashMap<String,String>());
                } else {
                    if (data.get(dic).containsKey(value)) {
                        int count = Integer.parseInt(data.get(dic).get(value)) + 1;
                        data.get(dic).replace(value, String.valueOf(count));
                        k++;
                    } else {
                        k++;
                        data.get(dic).put(value, "1");
                    }
                }
            }
            Map<String, Object[]> datas = new HashMap<>();
            datas.put("1", new Object[]{"Dic", "POS", "Number"});
            int inc = 2;
            for (Map.Entry<String, HashMap<String, String>> f : data.entrySet()) {
                String key = f.getKey();
                for (Map.Entry<String, String> p : f.getValue().entrySet()) {
                    datas.put(String.valueOf(inc), new Object[]{key, p.getKey(), p.getValue()});
                    inc++;
                }
            }
            //String filename = Utils.getValueXml("pathExportStatistics");
            String filename = StaticValue.statisticsTmpPath;
            Utils.exportJtableToExcel( datas,filename);
            
            JOptionPane.showMessageDialog(null, "file created in \n"+filename);
        } catch (IOException ex) {
           JOptionPane.showMessageDialog(null, "Error : "+ex.getMessage());
        }
    }//GEN-LAST:event_jMenuStatisticsMouseClicked

    private void jMenuDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuDeleteMouseClicked
        int dialogResult = JOptionPane.showConfirmDialog (null, "Do you want to delete this row?","Warning",JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.YES_OPTION){
            int t = this.getjTable1().getSelectedRow();
            this.getTableModel().removeRow(t);
            JOptionPane.showMessageDialog(null, "rows deleted !");
        }
        
    }//GEN-LAST:event_jMenuDeleteMouseClicked

    private void jMenuItemInsertAfterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemInsertAfterActionPerformed
        if(this.getjTable1().getSelectedRow()!=-1){
            //MenuAddBeforeDelac ad=new MenuAddBeforeDelac(this,this.getjTable1().getSelectedRow());
            //ad.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "No selected value");
        }
    }//GEN-LAST:event_jMenuItemInsertAfterActionPerformed

    private void jMenuItemInsertBeforeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemInsertBeforeActionPerformed
        if(this.getjTable1().getSelectedRow()!=-1){
            Object [] obj =new Object[10];
            for(int i=0;i<10;i++){
                obj[i]=this.getjTable1().getModel().getValueAt(this.getjTable1().getSelectedRow(), i);
            }
            MenuAddBeforeDelac ad=new MenuAddBeforeDelac(this,obj,this.getjTable1().getSelectedRow());
            ad.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "No selected value");
        }
    }//GEN-LAST:event_jMenuItemInsertBeforeActionPerformed

    private void jMenuViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuViewMouseClicked
        if(this.getjTable1().getSelectedRow()!=-1){
            Object [] obj =new Object[10];
            for(int i=0;i<10;i++){
                obj[i]=this.getjTable1().getModel().getValueAt(this.getjTable1().getSelectedRow(), i);
            }
            //MenuViewDelac viewDelac=new MenuViewDelac(this,obj);
            //viewDelac.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "No selected value");
        }
    }//GEN-LAST:event_jMenuViewMouseClicked

    private void jMenuEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuEditMouseClicked
        if(this.getjTable1().getSelectedRow()!=-1){
            Object [] obj =new Object[10];
            for(int i=0;i<10;i++){
                obj[i]=this.getjTable1().getModel().getValueAt(this.getjTable1().getSelectedRow(), i);
            }
            //MenuEditDelac editDelac=new MenuEditDelac(this,obj,this.getjTable1().getSelectedRow());
            //editDelac.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "No selected value");
        }
    }//GEN-LAST:event_jMenuEditMouseClicked

    private void jMenuBeforeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBeforeMouseClicked
        if(this.getjTable1().getSelectedRow()!=-1){
            Object [] obj =new Object[10];
            for(int i=0;i<10;i++){
                obj[i]=this.getjTable1().getModel().getValueAt(this.getjTable1().getSelectedRow(), i);
            }
            //MenuBeforeDelac beforeDelac=new MenuBeforeDelac(this,obj,this.getjTable1().getSelectedRow());
            //beforeDelac.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "No selected value");
        }
    }//GEN-LAST:event_jMenuBeforeMouseClicked

    private void jMenuAfterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuAfterMouseClicked
       if(this.getjTable1().getSelectedRow()!=-1){
            Object [] obj =new Object[10];
            for(int i=0;i<10;i++){
                obj[i]=this.getjTable1().getModel().getValueAt(this.getjTable1().getSelectedRow(), i);
            }
            //MenuAfterDelac afterDelac=new MenuAfterDelac(this,obj,this.getjTable1().getSelectedRow());
            //afterDelac.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "No selected value");
        }
    }//GEN-LAST:event_jMenuAfterMouseClicked

    private void jMenuSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuSaveMouseClicked
        int dialogResult = JOptionPane.showConfirmDialog (null, "This will overwrite your dictionaries. Are you sure?","Save Delac Dictioneries in Unicode",JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.YES_OPTION){
            BufferedWriter bfw;
            Map<String,List<String>> fileData=new HashMap<>();
            for(int row = 0; row < jTable1.getRowCount(); row ++){
                
                String file = (String) jTable1.getValueAt(row, 8);
                String lemma = (String) jTable1.getValueAt(row, 1);
                String fstCode = (String) jTable1.getValueAt(row, 3);
                String synSem = ((String) jTable1.getValueAt(row, 4));
                fstCode = fstCode+synSem+"="+fstCode;
                String str = lemma+","+fstCode;
                String comment =(String) jTable1.getValueAt(row, 5);
                if(comment!=null && comment.trim().length()>0){
                    str = str+"//"+jTable1.getValueAt(row, 5);
                }
                str=str+"\n";
                if(fileData.containsKey(file)){
                    fileData.get(file).add(str);
                }
                else{
                    List<String> tmp = new ArrayList<>();
                    tmp.add(str);
                    fileData.put(file, tmp);
                }
            }
            for(Map.Entry<String, List<String>> data:fileData.entrySet()){
                try {
                    //bfw = new BufferedWriter(new FileWriter(Utils.getValueXml("pathDelas")+"/"+data.getKey()));
                    bfw = new BufferedWriter(new FileWriter(StaticValue.allDelac+"//"+data.getKey()));
                    for(String lines:data.getValue()){
                        bfw.write(lines);
                    }
                    bfw.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "error :"+ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuSaveMouseClicked

    private void jMenuExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuExitMouseClicked
       this.setVisible(false);
    }//GEN-LAST:event_jMenuExitMouseClicked

    private void jMenuInflectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuInflectMouseClicked
        if(this.getjTable1().getSelectedRow()!=-1){
            
            try {
                String lemma = (String) this.getjTable1().getModel().getValueAt(this.getjTable1().getSelectedRow(), 1);
                String fst = (String) this.getjTable1().getModel().getValueAt(this.getjTable1().getSelectedRow(), 3);
                Utils.InflectDelas(lemma, fst);
                JOptionPane.showMessageDialog(null, "done !!");
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "error :"+ex.getMessage());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "error :"+ex.getMessage());
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No selected value");
        }
        
    }//GEN-LAST:event_jMenuInflectMouseClicked

    private void jButtonAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAllActionPerformed
        try {
            Map<String, String> data = new HashMap<>();
            int k = 0;
            for (int i = 0; i < this.getjTable1().getRowCount(); i++) {
                String sinsem = (String) this.getjTable1().getValueAt(i, 3);
                String temp = new String();
                try{
                    int length = sinsem.split(Pattern.quote("+")).length;
                    for(int j=2;j<length;j++){
                        temp = temp+" + "+sinsem.split(Pattern.quote("+"))[j];
                    }
                }
                catch(java.lang.ArrayIndexOutOfBoundsException ex){
                    continue;
                }
                String finalsinsem = temp.split("=")[0];
                
                String pos = (String) this.getjTable1().getValueAt(i, 0);
                if (!data.containsKey(pos)) {
                    data.put(pos, finalsinsem);
                } else {
                    String valueInData = data.get(pos);
                    String[] value = finalsinsem.split(Pattern.quote("+"));
                    for(String s:value){
                        if(!valueInData.contains(s)){
                            valueInData = valueInData+finalsinsem;
                            data.put(pos, valueInData);
                        }
                    }
                }
            }
            BufferedWriter bfw;
            bfw = new BufferedWriter(new FileWriter("TmpSinSem.txt"));
            for (Map.Entry<String, String> f : data.entrySet()) {
                bfw.write(f.getKey()+"_distribution");
                bfw.write(" = ");
                bfw.write(f.getValue());
                bfw.write("\n");
                bfw.write("\n");
            }
            bfw.close();
            JOptionPane.showMessageDialog(null, "file created in \n TmpSinSem.txt");
            Desktop.getDesktop().open(new File("TmpSinSem.txt"));
        } catch (IOException ex) {
           JOptionPane.showMessageDialog(null, "Error : "+ex.getMessage());
        }
    }//GEN-LAST:event_jButtonAllActionPerformed

    private void jTextFieldPosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPosKeyPressed
        try {
            JTextField textField = (JTextField) evt.getSource();
            String text = textField.getText();
            TableRowSorter<TableModel> rowSorter;
            rowSorter = new TableRowSorter<>(GridHelper.getOpenEditorLadlforDelac().getModel());
            this.getjTable1().setRowSorter(rowSorter);
            this.getjTable1().removeAll();
            if (text.trim().length() == 0) {
                rowSorter.setRowFilter(null);
            } else {
                RowFilter rowFilter = RowFilter.regexFilter("(?i)" +text, 0);// recherche avec la colonne indice 0
                rowSorter.setRowFilter(rowFilter);
            }
            this.getjTable1().repaint();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error : "+ex.getMessage());
        }
    }//GEN-LAST:event_jTextFieldPosKeyPressed

    private void jTextFieldLemmaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldLemmaKeyPressed
        try {
            JTextField textField = (JTextField) evt.getSource();
            String text = textField.getText();
            TableRowSorter<TableModel> rowSorter;
            rowSorter = new TableRowSorter<>(GridHelper.getOpenEditorLadlforDelac().getModel());
            this.getjTable1().setRowSorter(rowSorter);
            this.getjTable1().removeAll();
            if (text.trim().length() == 0) {
                rowSorter.setRowFilter(null);
            } else {
                RowFilter rowFilter = RowFilter.regexFilter("(?i)" +text, 1);// recherche avec la colonne indice 0
                rowSorter.setRowFilter(rowFilter);
            }
            this.getjTable1().repaint();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error : "+ex.getMessage());
        }
    }//GEN-LAST:event_jTextFieldLemmaKeyPressed

    private void jTextFieldFstKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldFstKeyPressed
        try {
            JTextField textField = (JTextField) evt.getSource();
            String text = textField.getText();
            TableRowSorter<TableModel> rowSorter;
            rowSorter = new TableRowSorter<>(GridHelper.getOpenEditorLadlforDelac().getModel());
            this.getjTable1().setRowSorter(rowSorter);
            this.getjTable1().removeAll();
            if (text.trim().length() == 0) {
                rowSorter.setRowFilter(null);
            } else {
                RowFilter rowFilter = RowFilter.regexFilter("(?i)" +text, 3);// recherche avec la colonne indice 0
                rowSorter.setRowFilter(rowFilter);
            }
            this.getjTable1().repaint();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error : "+ex.getMessage());
        }
    }//GEN-LAST:event_jTextFieldFstKeyPressed

    private void jTextFieldSinSemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSinSemKeyPressed
        try {
            JTextField textField = (JTextField) evt.getSource();
            String text = textField.getText();
            TableRowSorter<TableModel> rowSorter;
            rowSorter = new TableRowSorter<>(GridHelper.getOpenEditorLadlforDelac().getModel());
            this.getjTable1().setRowSorter(rowSorter);
            this.getjTable1().removeAll();
            if (text.trim().length() == 0) {
                rowSorter.setRowFilter(null);
            } else {
                RowFilter rowFilter = RowFilter.regexFilter("(?i)" +text, 4);// recherche avec la colonne indice 0
                rowSorter.setRowFilter(rowFilter);
            }
            this.getjTable1().repaint();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error : "+ex.getMessage());
        }
    }//GEN-LAST:event_jTextFieldSinSemKeyPressed

    private void jTextFieldDicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDicKeyPressed
        try {
            JTextField textField = (JTextField) evt.getSource();
            String text = textField.getText();
            TableRowSorter<TableModel> rowSorter;
            rowSorter = new TableRowSorter<>(GridHelper.getOpenEditorLadlforDelac().getModel());
            this.getjTable1().setRowSorter(rowSorter);
            this.getjTable1().removeAll();
            if (text.trim().length() == 0) {
                rowSorter.setRowFilter(null);
            } else {
                RowFilter rowFilter = RowFilter.regexFilter("(?i)" +text, 9);// recherche avec la colonne indice 0
                rowSorter.setRowFilter(rowFilter);
            }
            this.getjTable1().repaint();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error : "+ex.getMessage());
        }
    }//GEN-LAST:event_jTextFieldDicKeyPressed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            String pos = jTextField1.getText();
            String lemma = jTextField2.getText();
            String fst = jTextField3.getText();
            TableRowSorter<TableModel> rowSorter;
            rowSorter = new TableRowSorter<>(GridHelper.getOpenEditorLadlforDelac().getModel());
            this.getjTable1().setRowSorter(rowSorter);
            this.getjTable1().removeAll();
            List<RowFilter<Object,Object>> filters = new ArrayList<>();
            if (pos.length() != 0) {
                filters.add(RowFilter.regexFilter("(?i)" +pos, 0));
            }
            if (lemma.length() != 0) {
                filters.add(RowFilter.regexFilter("(?i)" +lemma, 1));
            } 
            if (fst.length() != 0) {
                filters.add(RowFilter.regexFilter("(?i)" +fst, 4));
            } 
            RowFilter rf = RowFilter.andFilter(filters);
            rowSorter.setRowFilter(rf);
            this.getjTable1().repaint();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    

    

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorDelac.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
         java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorDelac().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButtonAll;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenuAfter;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuBefore;
    private javax.swing.JMenu jMenuConv;
    private javax.swing.JMenu jMenuCount;
    private javax.swing.JMenu jMenuDelete;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuExit;
    private javax.swing.JMenu jMenuHepl;
    private javax.swing.JMenu jMenuInflect;
    private javax.swing.JMenuItem jMenuItemInsertAfter;
    private javax.swing.JMenuItem jMenuItemInsertBefore;
    private javax.swing.JMenu jMenuNew;
    private javax.swing.JMenu jMenuSave;
    private javax.swing.JMenu jMenuSaveLMF;
    private javax.swing.JMenu jMenuSort;
    private javax.swing.JMenu jMenuStatistics;
    private javax.swing.JMenu jMenuView;
    private javax.swing.JMenu jMenuWorldNet;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextFieldDic;
    private javax.swing.JTextField jTextFieldFst;
    private javax.swing.JTextField jTextFieldLemma;
    private javax.swing.JTextField jTextFieldPos;
    private javax.swing.JTextField jTextFieldSearch;
    private javax.swing.JTextField jTextFieldSinSem;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the jTable1
     */
    public javax.swing.JTable getjTable1() {
        return jTable1;
    }

    /**
     * @return the gm
     */
    public DefaultTableModel getTableModel() {
        return tableModel;
    }
}
